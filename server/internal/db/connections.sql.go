// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: connections.sql

package db

import (
	"context"
)

const createConnection = `-- name: CreateConnection :one
INSERT INTO connections (user_a, user_b, status)
VALUES ($1, $2, $3)
RETURNING user_a, user_b, created_at, status
`

type CreateConnectionParams struct {
	UserA  string `json:"user_a"`
	UserB  string `json:"user_b"`
	Status int16  `json:"status"`
}

func (q *Queries) CreateConnection(ctx context.Context, arg CreateConnectionParams) (Connections, error) {
	row := q.queryRow(ctx, q.createConnectionStmt, createConnection, arg.UserA, arg.UserB, arg.Status)
	var i Connections
	err := row.Scan(
		&i.UserA,
		&i.UserB,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const deleteConnection = `-- name: DeleteConnection :one
DELETE FROM connections WHERE user_a = $1 AND user_b = $2
RETURNING user_a, user_b, created_at, status
`

type DeleteConnectionParams struct {
	UserA string `json:"user_a"`
	UserB string `json:"user_b"`
}

func (q *Queries) DeleteConnection(ctx context.Context, arg DeleteConnectionParams) (Connections, error) {
	row := q.queryRow(ctx, q.deleteConnectionStmt, deleteConnection, arg.UserA, arg.UserB)
	var i Connections
	err := row.Scan(
		&i.UserA,
		&i.UserB,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getUserConnections = `-- name: GetUserConnections :many
SELECT user_a, user_b, created_at, status FROM connections WHERE user_a = $1 OR user_b = $1
`

func (q *Queries) GetUserConnections(ctx context.Context, userA string) ([]Connections, error) {
	rows, err := q.query(ctx, q.getUserConnectionsStmt, getUserConnections, userA)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Connections
	for rows.Next() {
		var i Connections
		if err := rows.Scan(
			&i.UserA,
			&i.UserB,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConnection = `-- name: UpdateConnection :one
UPDATE connections SET status = $1 WHERE user_a = $2 AND user_b = $3
RETURNING user_a, user_b, created_at, status
`

type UpdateConnectionParams struct {
	Status int16  `json:"status"`
	UserA  string `json:"user_a"`
	UserB  string `json:"user_b"`
}

func (q *Queries) UpdateConnection(ctx context.Context, arg UpdateConnectionParams) (Connections, error) {
	row := q.queryRow(ctx, q.updateConnectionStmt, updateConnection, arg.Status, arg.UserA, arg.UserB)
	var i Connections
	err := row.Scan(
		&i.UserA,
		&i.UserB,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}
