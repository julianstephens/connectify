// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post_media.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createPostMedia = `-- name: CreatePostMedia :one
INSERT INTO post_media (id, post_id, url, media_type, width, height, size_bytes, meta, sort_index)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, post_id, url, media_type, width, height, size_bytes, meta, sort_index, created_at
`

type CreatePostMediaParams struct {
	ID        uuid.UUID             `json:"id"`
	PostID    uuid.UUID             `json:"post_id"`
	Url       string                `json:"url"`
	MediaType string                `json:"media_type"`
	Width     sql.NullInt32         `json:"width"`
	Height    sql.NullInt32         `json:"height"`
	SizeBytes sql.NullInt64         `json:"size_bytes"`
	Meta      pqtype.NullRawMessage `json:"meta"`
	SortIndex sql.NullInt32         `json:"sort_index"`
}

func (q *Queries) CreatePostMedia(ctx context.Context, arg CreatePostMediaParams) (PostMedia, error) {
	row := q.queryRow(ctx, q.createPostMediaStmt, createPostMedia,
		arg.ID,
		arg.PostID,
		arg.Url,
		arg.MediaType,
		arg.Width,
		arg.Height,
		arg.SizeBytes,
		arg.Meta,
		arg.SortIndex,
	)
	var i PostMedia
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Url,
		&i.MediaType,
		&i.Width,
		&i.Height,
		&i.SizeBytes,
		&i.Meta,
		&i.SortIndex,
		&i.CreatedAt,
	)
	return i, err
}

const deletePostMedia = `-- name: DeletePostMedia :one
DELETE FROM post_media WHERE id = $1
RETURNING id, post_id, url, media_type, width, height, size_bytes, meta, sort_index, created_at
`

func (q *Queries) DeletePostMedia(ctx context.Context, id uuid.UUID) (PostMedia, error) {
	row := q.queryRow(ctx, q.deletePostMediaStmt, deletePostMedia, id)
	var i PostMedia
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Url,
		&i.MediaType,
		&i.Width,
		&i.Height,
		&i.SizeBytes,
		&i.Meta,
		&i.SortIndex,
		&i.CreatedAt,
	)
	return i, err
}

const getPostMedia = `-- name: GetPostMedia :many
SELECT id, post_id, url, media_type, width, height, size_bytes, meta, sort_index, created_at FROM post_media WHERE post_id = $1
`

func (q *Queries) GetPostMedia(ctx context.Context, postID uuid.UUID) ([]PostMedia, error) {
	rows, err := q.query(ctx, q.getPostMediaStmt, getPostMedia, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostMedia
	for rows.Next() {
		var i PostMedia
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.Url,
			&i.MediaType,
			&i.Width,
			&i.Height,
			&i.SizeBytes,
			&i.Meta,
			&i.SortIndex,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
