// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countUserPostsStmt, err = db.PrepareContext(ctx, countUserPosts); err != nil {
		return nil, fmt.Errorf("error preparing query CountUserPosts: %w", err)
	}
	if q.createConnectionStmt, err = db.PrepareContext(ctx, createConnection); err != nil {
		return nil, fmt.Errorf("error preparing query CreateConnection: %w", err)
	}
	if q.createFollowStmt, err = db.PrepareContext(ctx, createFollow); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFollow: %w", err)
	}
	if q.createPostStmt, err = db.PrepareContext(ctx, createPost); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePost: %w", err)
	}
	if q.createPostMediaStmt, err = db.PrepareContext(ctx, createPostMedia); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePostMedia: %w", err)
	}
	if q.deleteConnectionStmt, err = db.PrepareContext(ctx, deleteConnection); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteConnection: %w", err)
	}
	if q.deleteFollowStmt, err = db.PrepareContext(ctx, deleteFollow); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFollow: %w", err)
	}
	if q.deletePostStmt, err = db.PrepareContext(ctx, deletePost); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePost: %w", err)
	}
	if q.deletePostMediaStmt, err = db.PrepareContext(ctx, deletePostMedia); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePostMedia: %w", err)
	}
	if q.getPostStmt, err = db.PrepareContext(ctx, getPost); err != nil {
		return nil, fmt.Errorf("error preparing query GetPost: %w", err)
	}
	if q.getPostMediaStmt, err = db.PrepareContext(ctx, getPostMedia); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostMedia: %w", err)
	}
	if q.getUserConnectionsStmt, err = db.PrepareContext(ctx, getUserConnections); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserConnections: %w", err)
	}
	if q.getUserFollowsStmt, err = db.PrepareContext(ctx, getUserFollows); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserFollows: %w", err)
	}
	if q.listUserPostsAfterStmt, err = db.PrepareContext(ctx, listUserPostsAfter); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserPostsAfter: %w", err)
	}
	if q.listUserPostsFirstPageStmt, err = db.PrepareContext(ctx, listUserPostsFirstPage); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserPostsFirstPage: %w", err)
	}
	if q.listUserPostsOffsetStmt, err = db.PrepareContext(ctx, listUserPostsOffset); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserPostsOffset: %w", err)
	}
	if q.updateConnectionStmt, err = db.PrepareContext(ctx, updateConnection); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateConnection: %w", err)
	}
	if q.updateFollowStmt, err = db.PrepareContext(ctx, updateFollow); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFollow: %w", err)
	}
	if q.updatePostStmt, err = db.PrepareContext(ctx, updatePost); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePost: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countUserPostsStmt != nil {
		if cerr := q.countUserPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUserPostsStmt: %w", cerr)
		}
	}
	if q.createConnectionStmt != nil {
		if cerr := q.createConnectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createConnectionStmt: %w", cerr)
		}
	}
	if q.createFollowStmt != nil {
		if cerr := q.createFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFollowStmt: %w", cerr)
		}
	}
	if q.createPostStmt != nil {
		if cerr := q.createPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPostStmt: %w", cerr)
		}
	}
	if q.createPostMediaStmt != nil {
		if cerr := q.createPostMediaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPostMediaStmt: %w", cerr)
		}
	}
	if q.deleteConnectionStmt != nil {
		if cerr := q.deleteConnectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteConnectionStmt: %w", cerr)
		}
	}
	if q.deleteFollowStmt != nil {
		if cerr := q.deleteFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFollowStmt: %w", cerr)
		}
	}
	if q.deletePostStmt != nil {
		if cerr := q.deletePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostStmt: %w", cerr)
		}
	}
	if q.deletePostMediaStmt != nil {
		if cerr := q.deletePostMediaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostMediaStmt: %w", cerr)
		}
	}
	if q.getPostStmt != nil {
		if cerr := q.getPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostStmt: %w", cerr)
		}
	}
	if q.getPostMediaStmt != nil {
		if cerr := q.getPostMediaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostMediaStmt: %w", cerr)
		}
	}
	if q.getUserConnectionsStmt != nil {
		if cerr := q.getUserConnectionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserConnectionsStmt: %w", cerr)
		}
	}
	if q.getUserFollowsStmt != nil {
		if cerr := q.getUserFollowsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserFollowsStmt: %w", cerr)
		}
	}
	if q.listUserPostsAfterStmt != nil {
		if cerr := q.listUserPostsAfterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserPostsAfterStmt: %w", cerr)
		}
	}
	if q.listUserPostsFirstPageStmt != nil {
		if cerr := q.listUserPostsFirstPageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserPostsFirstPageStmt: %w", cerr)
		}
	}
	if q.listUserPostsOffsetStmt != nil {
		if cerr := q.listUserPostsOffsetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserPostsOffsetStmt: %w", cerr)
		}
	}
	if q.updateConnectionStmt != nil {
		if cerr := q.updateConnectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateConnectionStmt: %w", cerr)
		}
	}
	if q.updateFollowStmt != nil {
		if cerr := q.updateFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFollowStmt: %w", cerr)
		}
	}
	if q.updatePostStmt != nil {
		if cerr := q.updatePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePostStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	countUserPostsStmt         *sql.Stmt
	createConnectionStmt       *sql.Stmt
	createFollowStmt           *sql.Stmt
	createPostStmt             *sql.Stmt
	createPostMediaStmt        *sql.Stmt
	deleteConnectionStmt       *sql.Stmt
	deleteFollowStmt           *sql.Stmt
	deletePostStmt             *sql.Stmt
	deletePostMediaStmt        *sql.Stmt
	getPostStmt                *sql.Stmt
	getPostMediaStmt           *sql.Stmt
	getUserConnectionsStmt     *sql.Stmt
	getUserFollowsStmt         *sql.Stmt
	listUserPostsAfterStmt     *sql.Stmt
	listUserPostsFirstPageStmt *sql.Stmt
	listUserPostsOffsetStmt    *sql.Stmt
	updateConnectionStmt       *sql.Stmt
	updateFollowStmt           *sql.Stmt
	updatePostStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		countUserPostsStmt:         q.countUserPostsStmt,
		createConnectionStmt:       q.createConnectionStmt,
		createFollowStmt:           q.createFollowStmt,
		createPostStmt:             q.createPostStmt,
		createPostMediaStmt:        q.createPostMediaStmt,
		deleteConnectionStmt:       q.deleteConnectionStmt,
		deleteFollowStmt:           q.deleteFollowStmt,
		deletePostStmt:             q.deletePostStmt,
		deletePostMediaStmt:        q.deletePostMediaStmt,
		getPostStmt:                q.getPostStmt,
		getPostMediaStmt:           q.getPostMediaStmt,
		getUserConnectionsStmt:     q.getUserConnectionsStmt,
		getUserFollowsStmt:         q.getUserFollowsStmt,
		listUserPostsAfterStmt:     q.listUserPostsAfterStmt,
		listUserPostsFirstPageStmt: q.listUserPostsFirstPageStmt,
		listUserPostsOffsetStmt:    q.listUserPostsOffsetStmt,
		updateConnectionStmt:       q.updateConnectionStmt,
		updateFollowStmt:           q.updateFollowStmt,
		updatePostStmt:             q.updatePostStmt,
	}
}
