// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: follows.sql

package db

import (
	"context"
)

const createFollow = `-- name: CreateFollow :one
INSERT INTO follows (follower_id, followee_id, status)
VALUES ($1, $2, $3)
RETURNING follower_id, followee_id, created_at, status
`

type CreateFollowParams struct {
	FollowerID string `json:"follower_id"`
	FolloweeID string `json:"followee_id"`
	Status     int16  `json:"status"`
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) (Follows, error) {
	row := q.queryRow(ctx, q.createFollowStmt, createFollow, arg.FollowerID, arg.FolloweeID, arg.Status)
	var i Follows
	err := row.Scan(
		&i.FollowerID,
		&i.FolloweeID,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const deleteFollow = `-- name: DeleteFollow :one
DELETE FROM follows WHERE follower_id = $1 AND followee_id = $2
RETURNING follower_id, followee_id, created_at, status
`

type DeleteFollowParams struct {
	FollowerID string `json:"follower_id"`
	FolloweeID string `json:"followee_id"`
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) (Follows, error) {
	row := q.queryRow(ctx, q.deleteFollowStmt, deleteFollow, arg.FollowerID, arg.FolloweeID)
	var i Follows
	err := row.Scan(
		&i.FollowerID,
		&i.FolloweeID,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getUserFollows = `-- name: GetUserFollows :many
SELECT follower_id, followee_id, created_at, status FROM follows WHERE follower_id = $1
`

func (q *Queries) GetUserFollows(ctx context.Context, followerID string) ([]Follows, error) {
	rows, err := q.query(ctx, q.getUserFollowsStmt, getUserFollows, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follows
	for rows.Next() {
		var i Follows
		if err := rows.Scan(
			&i.FollowerID,
			&i.FolloweeID,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFollow = `-- name: UpdateFollow :one
UPDATE follows SET status = $1 WHERE follower_id = $2 AND followee_id = $3
RETURNING follower_id, followee_id, created_at, status
`

type UpdateFollowParams struct {
	Status     int16  `json:"status"`
	FollowerID string `json:"follower_id"`
	FolloweeID string `json:"followee_id"`
}

func (q *Queries) UpdateFollow(ctx context.Context, arg UpdateFollowParams) (Follows, error) {
	row := q.queryRow(ctx, q.updateFollowStmt, updateFollow, arg.Status, arg.FollowerID, arg.FolloweeID)
	var i Follows
	err := row.Scan(
		&i.FollowerID,
		&i.FolloweeID,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}
