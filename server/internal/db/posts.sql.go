// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, author_id, content, content_html, visibility, reply_to_post_id, original_post_id, language, meta)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, author_id, content, content_html, visibility, reply_to_post_id, original_post_id, language, meta, likes_count, comments_count, shares_count, created_at, updated_at, deleted_at, search_vector
`

type CreatePostParams struct {
	ID             uuid.UUID             `json:"id"`
	AuthorID       string                `json:"author_id"`
	Content        string                `json:"content"`
	ContentHtml    sql.NullString        `json:"content_html"`
	Visibility     int16                 `json:"visibility"`
	ReplyToPostID  uuid.NullUUID         `json:"reply_to_post_id"`
	OriginalPostID uuid.NullUUID         `json:"original_post_id"`
	Language       sql.NullString        `json:"language"`
	Meta           pqtype.NullRawMessage `json:"meta"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Posts, error) {
	row := q.queryRow(ctx, q.createPostStmt, createPost,
		arg.ID,
		arg.AuthorID,
		arg.Content,
		arg.ContentHtml,
		arg.Visibility,
		arg.ReplyToPostID,
		arg.OriginalPostID,
		arg.Language,
		arg.Meta,
	)
	var i Posts
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Content,
		&i.ContentHtml,
		&i.Visibility,
		&i.ReplyToPostID,
		&i.OriginalPostID,
		&i.Language,
		&i.Meta,
		&i.LikesCount,
		&i.CommentsCount,
		&i.SharesCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.SearchVector,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :one
DELETE FROM posts WHERE id = $1
RETURNING id, author_id, content, content_html, visibility, reply_to_post_id, original_post_id, language, meta, likes_count, comments_count, shares_count, created_at, updated_at, deleted_at, search_vector
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) (Posts, error) {
	row := q.queryRow(ctx, q.deletePostStmt, deletePost, id)
	var i Posts
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Content,
		&i.ContentHtml,
		&i.Visibility,
		&i.ReplyToPostID,
		&i.OriginalPostID,
		&i.Language,
		&i.Meta,
		&i.LikesCount,
		&i.CommentsCount,
		&i.SharesCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.SearchVector,
	)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT id, author_id, content, content_html, visibility, reply_to_post_id, original_post_id, language, meta, likes_count, comments_count, shares_count, created_at, updated_at, deleted_at, search_vector FROM posts WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (Posts, error) {
	row := q.queryRow(ctx, q.getPostStmt, getPost, id)
	var i Posts
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Content,
		&i.ContentHtml,
		&i.Visibility,
		&i.ReplyToPostID,
		&i.OriginalPostID,
		&i.Language,
		&i.Meta,
		&i.LikesCount,
		&i.CommentsCount,
		&i.SharesCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.SearchVector,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts SET content = $1, content_html = $2, visibility = $3, reply_to_post_id = $4, original_post_id = $5, language = $6, meta = $7, likes_count=$8, comments_count=$9, shares_count=$10, updated_at = $11 WHERE id = $12
RETURNING id, author_id, content, content_html, visibility, reply_to_post_id, original_post_id, language, meta, likes_count, comments_count, shares_count, created_at, updated_at, deleted_at, search_vector
`

type UpdatePostParams struct {
	Content        string                `json:"content"`
	ContentHtml    sql.NullString        `json:"content_html"`
	Visibility     int16                 `json:"visibility"`
	ReplyToPostID  uuid.NullUUID         `json:"reply_to_post_id"`
	OriginalPostID uuid.NullUUID         `json:"original_post_id"`
	Language       sql.NullString        `json:"language"`
	Meta           pqtype.NullRawMessage `json:"meta"`
	LikesCount     int64                 `json:"likes_count"`
	CommentsCount  int64                 `json:"comments_count"`
	SharesCount    int64                 `json:"shares_count"`
	UpdatedAt      time.Time             `json:"updated_at"`
	ID             uuid.UUID             `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Posts, error) {
	row := q.queryRow(ctx, q.updatePostStmt, updatePost,
		arg.Content,
		arg.ContentHtml,
		arg.Visibility,
		arg.ReplyToPostID,
		arg.OriginalPostID,
		arg.Language,
		arg.Meta,
		arg.LikesCount,
		arg.CommentsCount,
		arg.SharesCount,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Posts
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Content,
		&i.ContentHtml,
		&i.Visibility,
		&i.ReplyToPostID,
		&i.OriginalPostID,
		&i.Language,
		&i.Meta,
		&i.LikesCount,
		&i.CommentsCount,
		&i.SharesCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.SearchVector,
	)
	return i, err
}
