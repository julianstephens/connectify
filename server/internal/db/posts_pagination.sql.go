// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts_pagination.sql

package db

import (
	"context"
	"time"
)

const countUserPosts = `-- name: CountUserPosts :one
SELECT COUNT(*) FROM posts WHERE author_id = $1
`

func (q *Queries) CountUserPosts(ctx context.Context, authorID string) (int64, error) {
	row := q.queryRow(ctx, q.countUserPostsStmt, countUserPosts, authorID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listUserPostsAfter = `-- name: ListUserPostsAfter :many
SELECT id, author_id, content, content_html, visibility, reply_to_post_id, original_post_id, language, meta, likes_count, comments_count, shares_count, created_at, updated_at, deleted_at, search_vector FROM posts WHERE author_id = $1 AND created_at < $2
ORDER BY created_at DESC
LIMIT $3
`

type ListUserPostsAfterParams struct {
	AuthorID  string    `json:"author_id"`
	CreatedAt time.Time `json:"created_at"`
	Limit     int64     `json:"limit"`
}

func (q *Queries) ListUserPostsAfter(ctx context.Context, arg ListUserPostsAfterParams) ([]Posts, error) {
	rows, err := q.query(ctx, q.listUserPostsAfterStmt, listUserPostsAfter, arg.AuthorID, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Posts
	for rows.Next() {
		var i Posts
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Content,
			&i.ContentHtml,
			&i.Visibility,
			&i.ReplyToPostID,
			&i.OriginalPostID,
			&i.Language,
			&i.Meta,
			&i.LikesCount,
			&i.CommentsCount,
			&i.SharesCount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.SearchVector,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserPostsFirstPage = `-- name: ListUserPostsFirstPage :many
SELECT id, author_id, content, content_html, visibility, reply_to_post_id, original_post_id, language, meta, likes_count, comments_count, shares_count, created_at, updated_at, deleted_at, search_vector FROM posts WHERE author_id = $1
ORDER BY created_at DESC
LIMIT $2
`

type ListUserPostsFirstPageParams struct {
	AuthorID string `json:"author_id"`
	Limit    int64  `json:"limit"`
}

func (q *Queries) ListUserPostsFirstPage(ctx context.Context, arg ListUserPostsFirstPageParams) ([]Posts, error) {
	rows, err := q.query(ctx, q.listUserPostsFirstPageStmt, listUserPostsFirstPage, arg.AuthorID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Posts
	for rows.Next() {
		var i Posts
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Content,
			&i.ContentHtml,
			&i.Visibility,
			&i.ReplyToPostID,
			&i.OriginalPostID,
			&i.Language,
			&i.Meta,
			&i.LikesCount,
			&i.CommentsCount,
			&i.SharesCount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.SearchVector,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserPostsOffset = `-- name: ListUserPostsOffset :many
SELECT id, author_id, content, content_html, visibility, reply_to_post_id, original_post_id, language, meta, likes_count, comments_count, shares_count, created_at, updated_at, deleted_at, search_vector FROM posts WHERE author_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListUserPostsOffsetParams struct {
	AuthorID string `json:"author_id"`
	Limit    int64  `json:"limit"`
	Offset   int64  `json:"offset"`
}

func (q *Queries) ListUserPostsOffset(ctx context.Context, arg ListUserPostsOffsetParams) ([]Posts, error) {
	rows, err := q.query(ctx, q.listUserPostsOffsetStmt, listUserPostsOffset, arg.AuthorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Posts
	for rows.Next() {
		var i Posts
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Content,
			&i.ContentHtml,
			&i.Visibility,
			&i.ReplyToPostID,
			&i.OriginalPostID,
			&i.Language,
			&i.Meta,
			&i.LikesCount,
			&i.CommentsCount,
			&i.SharesCount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.SearchVector,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
